name: Continuous Integration

on:
  # For pull requests
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, edited]

  # When we merge into master
  push:
    branches:
      - master

env:
  # These environment variables are automatically recognized by poetry and pip
  # They allow us to specifically control where the cache is kept, so we can use 
  # the actions/cache@v2 action to store downloaded dependencies between multiple runs
  POETRY_CACHE_DIR: ${{ github.workspace }}/.cache/poetry
  PIP_CACHE_DIR: ${{ github.workspace }}/.cache/pip
  GITHUB_TOKEN: ${{ secrets.OTTO_TOKEN }}
  POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_REGISTRY_TOKEN }}

jobs:
    commit_lint:
      name: Lint commit messages
      runs-on: ubuntu-latest

      # This is triggered when we're not pushing a chore to master - written with the more
      # complicated syntax (OR of NOT) instead of (NOT of AND) for syntax limitations
      if: (!startsWith(github.event.head_commit.message, 'chore') || github.event_name != 'push')

      steps:
        - name: Check out code
          uses: actions/checkout@v2.3.4
          with:
            ref: ${{ github.sha }}
            fetch-depth: 0

        - name: Lint commit messages
          uses: wagoid/commitlint-github-action@v2
          with:
            failOnWarnings: true

        - uses: amannn/action-semantic-pull-request@v3.1.0
          if: github.event_name == 'pull_request'

    test_and_release:
      name: Run checks and tests, then release
      runs-on: ubuntu-latest
      needs: [commit_lint]

      # This is triggered when we're not pushing a chore to master - written with the more
      # complicated syntax (OR of NOT) instead of (NOT of AND) for syntax limitations
      if: (!startsWith(github.event.head_commit.message, 'chore') || github.event_name != 'push')

      steps:
        - name: Check out code
          uses: actions/checkout@v2.3.4
          with:
            ref: ${{ github.sha }}
            token: ${{ secrets.OTTO_TOKEN }}

        - name: Check TODOs
          uses: outcome-co/action-check-todos@v1.7.5
          with:
            pattern: "**/*"

        - name: Get python version
          uses: outcome-co/action-read-toml@v2.0.10
          id: python_version
          with:
            path: pyproject.toml
            key: tool.poetry.dependencies.python

        - name: Set up python ${{ steps.python_version.outputs.tool_poetry_dependencies_python }}
          uses: actions/setup-python@v2.2.1
          with:
            python-version: ${{ steps.python_version.outputs.tool_poetry_dependencies_python }}

        - name: Configure pip cache
          uses: actions/cache@v2
          with:
            path: ${{ env.PIP_CACHE_DIR }}
            # Pip is only used to install poetry, and the poetry version 
            # is stored in pyproject.toml
            key: pip-${{ hashFiles('**/pyproject.toml') }}
            restore-keys: |
                pip

        - name: Configure poetry cache
          uses: actions/cache@v2
          with:
            path: ${{ env.POETRY_CACHE_DIR }}
            # All of the dependencies are stored in pyproject.toml
            key: poetry-${{ hashFiles('**/poetry.lock') }}
            restore-keys: |
                poetry

        - name: Install dependencies
          run: make ci-setup

        - name: Run checks
          run: make check
        
        # From here on, all checks and tests have passed, and we're heading for a release
        # if we're merging into master (i.e. not pull requests or repository_dispatch)

        - name: Configure Otto
          if: github.event_name == 'push'
          run: |
            git config --local user.email "otc-builder@outcome.co"
            git config --local user.name "Otto the Bot"

        # This creates a new commit and tag if we're bumping
        - name: Bump version
          if: github.event_name == 'push'
          id: bump_version
          uses: outcome-co/action-update-version@v0.10.8

        # If we've created a new version, push it
        - name: Push new version
          if: github.event_name == 'push' && steps.bump_version.outputs.updated == 'true'
          run: git push origin HEAD:master --follow-tags

        - name: Publish package
          if: github.event_name == 'push' && steps.bump_version.outputs.updated == 'true'
          run: make publish

    auto_merge_dependabot:
        name: Auto-approve dependabot pull requests
        runs-on: ubuntu-latest
        needs: [test_and_release]

        if: (github.actor == 'dependabot[bot]' || github.actor == 'dependabot-preview[bot]') && github.event_name == 'pull_request'

        steps:
          - name: Auto-approve
            uses: hmarr/auto-approve-action@v2.0.0
            with:
              github-token: ${{ secrets.OTTO_TOKEN }}

          - name: Auto-merge
            uses: "pascalgn/automerge-action@v0.13.0"
            env:
              MERGE_LABELS: ""
              MERGE_METHOD: squash
